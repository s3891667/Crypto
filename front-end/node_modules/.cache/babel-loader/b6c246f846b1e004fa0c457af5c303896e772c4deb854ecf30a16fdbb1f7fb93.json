{"ast":null,"code":"const crypto = require('crypto');\nconst algorithm = 'aes-256-gcm';\nconst ivLength = 16;\nconst tagLength = 16;\nconst defaultSaltLength = 64;\nconst defaultPbkdf2Iterations = 100000;\nfunction Cryptr(secret, options) {\n  if (!secret || typeof secret !== 'string') {\n    throw new Error('Cryptr: secret must be a non-0-length string');\n  }\n  let saltLength = defaultSaltLength;\n  let pbkdf2Iterations = defaultPbkdf2Iterations;\n  if (options) {\n    if (options.pbkdf2Iterations) {\n      pbkdf2Iterations = options.pbkdf2Iterations;\n    }\n    if (options.saltLength) {\n      saltLength = options.saltLength;\n    }\n  }\n  const tagPosition = saltLength + ivLength;\n  const encryptedPosition = tagPosition + tagLength;\n  function getKey(salt) {\n    return crypto.pbkdf2Sync(secret, salt, pbkdf2Iterations, 32, 'sha512');\n  }\n  this.encrypt = function encrypt(value) {\n    if (value == null) {\n      throw new Error('value must not be null or undefined');\n    }\n    const iv = crypto.randomBytes(ivLength);\n    const salt = crypto.randomBytes(saltLength);\n    const key = getKey(salt);\n    const cipher = crypto.createCipheriv(algorithm, key, iv);\n    const encrypted = Buffer.concat([cipher.update(String(value), 'utf8'), cipher.final()]);\n    const tag = cipher.getAuthTag();\n    return Buffer.concat([salt, iv, tag, encrypted]).toString('hex');\n  };\n  this.decrypt = function decrypt(value) {\n    if (value == null) {\n      throw new Error('value must not be null or undefined');\n    }\n    const stringValue = Buffer.from(String(value), 'hex');\n    const salt = stringValue.slice(0, saltLength);\n    const iv = stringValue.slice(saltLength, tagPosition);\n    const tag = stringValue.slice(tagPosition, encryptedPosition);\n    const encrypted = stringValue.slice(encryptedPosition);\n    const key = getKey(salt);\n    const decipher = crypto.createDecipheriv(algorithm, key, iv);\n    decipher.setAuthTag(tag);\n    return decipher.update(encrypted) + decipher.final('utf8');\n  };\n}\nmodule.exports = Cryptr;","map":{"version":3,"names":["crypto","require","algorithm","ivLength","tagLength","defaultSaltLength","defaultPbkdf2Iterations","Cryptr","secret","options","Error","saltLength","pbkdf2Iterations","tagPosition","encryptedPosition","getKey","salt","pbkdf2Sync","encrypt","value","iv","randomBytes","key","cipher","createCipheriv","encrypted","Buffer","concat","update","String","final","tag","getAuthTag","toString","decrypt","stringValue","from","slice","decipher","createDecipheriv","setAuthTag","module","exports"],"sources":["/home/owen/Documents/Projects/nodejsProject/crypt/front-end/node_modules/cryptr/index.js"],"sourcesContent":["const crypto = require('crypto');\n\nconst algorithm = 'aes-256-gcm';\nconst ivLength = 16;\nconst tagLength = 16;\nconst defaultSaltLength = 64;\nconst defaultPbkdf2Iterations = 100000;\n\nfunction Cryptr(secret, options) {\n    if (!secret || typeof secret !== 'string') {\n        throw new Error('Cryptr: secret must be a non-0-length string');\n    }\n\n    let saltLength = defaultSaltLength;\n    let pbkdf2Iterations = defaultPbkdf2Iterations;\n\n    if (options) {\n        if (options.pbkdf2Iterations) {\n            pbkdf2Iterations = options.pbkdf2Iterations;\n        }\n\n        if (options.saltLength) {\n            saltLength = options.saltLength;\n        }\n    }\n\n    const tagPosition = saltLength + ivLength;\n    const encryptedPosition = tagPosition + tagLength;\n\n    function getKey(salt) {\n        return crypto.pbkdf2Sync(secret, salt, pbkdf2Iterations, 32, 'sha512');\n    }\n\n    this.encrypt = function encrypt(value) {\n        if (value == null) {\n            throw new Error('value must not be null or undefined');\n        }\n\n        const iv = crypto.randomBytes(ivLength);\n        const salt = crypto.randomBytes(saltLength);\n\n        const key = getKey(salt);\n\n        const cipher = crypto.createCipheriv(algorithm, key, iv);\n        const encrypted = Buffer.concat([cipher.update(String(value), 'utf8'), cipher.final()]);\n\n        const tag = cipher.getAuthTag();\n\n        return Buffer.concat([salt, iv, tag, encrypted]).toString('hex');\n    };\n\n    this.decrypt = function decrypt(value) {\n        if (value == null) {\n            throw new Error('value must not be null or undefined');\n        }\n\n        const stringValue = Buffer.from(String(value), 'hex');\n\n        const salt = stringValue.slice(0, saltLength);\n        const iv = stringValue.slice(saltLength, tagPosition);\n        const tag = stringValue.slice(tagPosition, encryptedPosition);\n        const encrypted = stringValue.slice(encryptedPosition);\n\n        const key = getKey(salt);\n\n        const decipher = crypto.createDecipheriv(algorithm, key, iv);\n\n        decipher.setAuthTag(tag);\n\n        return decipher.update(encrypted) + decipher.final('utf8');\n    };\n}\n\nmodule.exports = Cryptr;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}